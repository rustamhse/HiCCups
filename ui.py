# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'user_interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QGraphicsScene
from functools import partial
import os
import logging
import matplotlib

matplotlib.use('Agg')
import subprocess
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
import sys
from hiclib import mapping, fragmentHiC, binnedData
from mirnylib import h5dict, genome, plotting
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtGui import QImage, QPixmap
from matplotlib.backends.backend_agg import FigureCanvasAgg


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(812, 541)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 791, 491))
        self.tabWidget.setObjectName("tabWidget")
        self.Welcome_tab = QtWidgets.QWidget()
        self.Welcome_tab.setObjectName("Welcome_tab")
        self.description_text = QtWidgets.QTextBrowser(self.Welcome_tab)
        self.description_text.setGeometry(QtCore.QRect(10, 10, 781, 431))
        self.description_text.setObjectName("description_text")
        self.tabWidget.addTab(self.Welcome_tab, "")
        self.Input_tab = QtWidgets.QWidget()
        self.Input_tab.setObjectName("Input_tab")
        self.input_info = QtWidgets.QTextBrowser(self.Input_tab)
        self.input_info.setGeometry(QtCore.QRect(10, 20, 761, 221))
        self.input_info.setObjectName("input_info")
        self.bw2_push = QtWidgets.QPushButton(self.Input_tab)
        self.bw2_push.setGeometry(QtCore.QRect(680, 250, 88, 27))
        self.bw2_push.setObjectName("bw2_push")
        self.bw2_path = QtWidgets.QLineEdit(self.Input_tab)
        self.bw2_path.setGeometry(QtCore.QRect(10, 250, 661, 27))
        self.bw2_path.setObjectName("bw2_path")
        self.genome_path = QtWidgets.QLineEdit(self.Input_tab)
        self.genome_path.setGeometry(QtCore.QRect(10, 290, 421, 27))
        self.genome_path.setObjectName("genome_path")
        self.l_r_path = QtWidgets.QLineEdit(self.Input_tab)
        self.l_r_path.setGeometry(QtCore.QRect(10, 330, 661, 27))
        self.l_r_path.setObjectName("l_r_path")
        self.genome_push = QtWidgets.QPushButton(self.Input_tab)
        self.genome_push.setGeometry(QtCore.QRect(680, 290, 88, 27))
        self.genome_push.setObjectName("genome_push")
        self.l_r_push = QtWidgets.QPushButton(self.Input_tab)
        self.l_r_push.setGeometry(QtCore.QRect(680, 330, 88, 27))
        self.l_r_push.setObjectName("l_r_push")
        self.r_r_path = QtWidgets.QLineEdit(self.Input_tab)
        self.r_r_path.setGeometry(QtCore.QRect(10, 370, 661, 27))
        self.r_r_path.setObjectName("r_r_path")
        self.r_r_push = QtWidgets.QPushButton(self.Input_tab)
        self.r_r_push.setGeometry(QtCore.QRect(680, 370, 88, 27))
        self.r_r_push.setObjectName("r_r_push")
        self.chromosome = QtWidgets.QLineEdit(self.Input_tab)
        self.chromosome.setGeometry(QtCore.QRect(440, 290, 111, 27))
        self.chromosome.setObjectName("chromosome")
        self.enzyme = QtWidgets.QLineEdit(self.Input_tab)
        self.enzyme.setGeometry(QtCore.QRect(560, 290, 111, 27))
        self.enzyme.setObjectName("enzyme")
        self.resoultion_line = QtWidgets.QLineEdit(self.Input_tab)
        self.resoultion_line.setGeometry(QtCore.QRect(10, 410, 761, 27))
        self.resoultion_line.setObjectName("resoultion_line")
        self.tabWidget.addTab(self.Input_tab, "")
        self.Console_output = QtWidgets.QWidget()
        self.Console_output.setObjectName("Console_output")
        self.progressBar = QtWidgets.QProgressBar(self.Console_output)
        self.progressBar.setGeometry(QtCore.QRect(10, 410, 661, 31))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.Proceed = QtWidgets.QPushButton(self.Console_output)
        self.Proceed.setGeometry(QtCore.QRect(690, 410, 88, 31))
        self.Proceed.setObjectName("Proceed")
        self.textEdit = QtWidgets.QTextEdit(self.Console_output)
        self.textEdit.setGeometry(QtCore.QRect(10, 10, 771, 391))
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")
        self.tabWidget.addTab(self.Console_output, "")
        self.Heatmap_tab = QtWidgets.QWidget()
        self.Heatmap_tab.setObjectName("Heatmap_tab")
        self.heatmap_widget = QtWidgets.QGraphicsView(self.Heatmap_tab)
        self.heatmap_widget.setGeometry(QtCore.QRect(10, 10, 761, 441))
        self.heatmap_widget.setObjectName("heatmap_widget")
        self.tabWidget.addTab(self.Heatmap_tab, "")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 510, 791, 20))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)

        # <<ФУНКЦИОНАЛЬНЫЙ БЛОК>>
        self.bw2_push.clicked.connect(self.browse_bw2_path)
        self.genome_push.clicked.connect(self.browse_genome_path)
        self.l_r_push.clicked.connect(self.browse_l_r_path)
        self.r_r_push.clicked.connect(self.browse_r_r_path)

        self.Proceed.clicked.connect(lambda: self.procedure(
            self.genome_path.text(),
            self.bw2_path.text(),
            self.l_r_path.text(),
            self.r_r_path.text(),
            self.genome_path.text(),
            self.chromosome.text(),
            self.enzyme.text(),
            self.resoultion_line.text()
        ))

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "HiCCups"))
        self.description_text.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu Sans\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Welcome to HiCCups!</span> </p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This program is designed for comprehensive processing of Hi-C sequencing, starting with iterative alignment of reads based on FASTQ data and culminating in the generation of chromosomal interaction heatmaps.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">What you need:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- bowtie2</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Input Files:</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">- Two readings</span> <br />  - Left side of the DNA molecule (i.e. reads01_R1.fastq)<br />  - Right side of the DNA molecule (i.e. reads01_R2.fastq)</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">- Genome</span> <br />  - Genome file in .fa format (i.e. chr2R.fa)<br />  - A text file with genomic gaps presented (i.e. gap.txt)</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Processing Workflow:</span> Our script begins with the iterative alignment of reads using Bowtie2, saving the results in BAM format. It then parses these aligned data into structured Hi-C fragments, considering genome fragmentation by the chosen enzyme, and applies filtering to remove duplicates and excessively large fragments.</p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Output Data:</span> Ultimately, you will receive an HDF5 file with a Hi-C heatmap, which presents an iteratively corrected view of chromosomal interactions. A visualization of this heatmap in PDF format will also be created, allowing you to visually assess the chromosomal structure.</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Welcome_tab), _translate("MainWindow", "Welcome"))
        self.input_info.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu Sans\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">This is an input tab</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Please provide</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Path of bowtie2 folder</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Genome file .fa, specify chromosome and enzyme</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Left side readings .fa</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Right side readings .fa</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">- Type resolution of heatmap</p></body></html>"))
        self.bw2_push.setText(_translate("MainWindow", "<<"))
        self.bw2_path.setPlaceholderText(_translate("MainWindow", "Path of bowtie2 folder"))
        self.genome_path.setPlaceholderText(_translate("MainWindow", "Genome path (folder with .fa and gap.txt)"))
        self.l_r_path.setPlaceholderText(_translate("MainWindow", "Left side readings .fa"))
        self.genome_push.setText(_translate("MainWindow", "<<"))
        self.l_r_push.setText(_translate("MainWindow", "<<"))
        self.r_r_path.setPlaceholderText(_translate("MainWindow", "Right side readings .fa"))
        self.r_r_push.setText(_translate("MainWindow", "<<"))
        self.chromosome.setPlaceholderText(_translate("MainWindow", "Chromosome"))
        self.enzyme.setPlaceholderText(_translate("MainWindow", "Enzyme"))
        self.resoultion_line.setPlaceholderText(_translate("MainWindow", "Resolution (integer, i.e. 100000)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Input_tab), _translate("MainWindow", "Input"))
        self.Proceed.setText(_translate("MainWindow", "Proceed"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu Sans\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Please provide input on <span style=\" font-style:italic;\">&quot;Input&quot;</span> tab</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Then click <span style=\" font-style:italic;\">&quot;Proceed&quot;</span> button</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Console_output), _translate("MainWindow", "Procedure"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Heatmap_tab), _translate("MainWindow", "Heatmap"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:8pt;\">HiCCups 0.1 HSE Nizhny Novgorod 2024</span></p></body></html>"))

    def browse_bw2_path(self):
        fname = QFileDialog.getExistingDirectory(self.centralwidget, 'Choose file')
        if fname:
            self.bw2_path.setText(fname)

    def browse_genome_path(self):
        fname = QFileDialog.getExistingDirectory(self.centralwidget, 'Choose file')
        if fname:
            self.genome_path.setText(fname)

    def browse_l_r_path(self):
        fname, _ = QFileDialog.getOpenFileName(self.centralwidget, 'Open file', os.getcwd(),
                                               "FASTQ Files (*.fq *.fastq)")
        if fname:
            self.l_r_path.setText(fname)

    def browse_r_r_path(self):
        fname, _ = QFileDialog.getOpenFileName(self.centralwidget, 'Open file', os.getcwd(),
                                               "FASTQ Files (*.fq *.fastq)")
        if fname:
            self.r_r_path.setText(fname)

    def display_heatmap(self, fig):
        # Создаем холст для рендеринга из matplotlib figure
        canvas = FigureCanvasAgg(fig)
        canvas.draw()

        # Преобразуем холст в QImage
        buf = canvas.buffer_rgba()
        qimage = QImage(buf, canvas.get_width_height()[0], canvas.get_width_height()[1], QImage.Format_RGBA8888)

        # Создаем QPixmap из QImage
        pixmap = QPixmap.fromImage(qimage)

        # Создаем QGraphicsScene и добавляем QPixmap
        scene = QGraphicsScene()
        scene.addPixmap(pixmap)
        self.heatmap_widget.setScene(scene)
        self.heatmap_widget.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)

    def procedure(self, gnm, b_path, fa_1_path, fa_2_path, g_path, chromosome, enzyme, rsl):
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

        log = '>> Procedure started at ' + dt_string + 2 * "\n"

        try:

            cmd = [
                b_path + '/bowtie2-build-s',
                gnm,
                os.getcwd() + '/index'
            ]

            process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

            if process.stdout:
                log += process.stdout + "\n"
                self.textEdit.setText(log)
            if process.returncode == 0:
                log += ">> Indexes created successfully."
            self.textEdit.setText(log)

            self.progressBar.setValue(10)

            log += ">> Starting iteration" + "\n"
            self.textEdit.setText(log)

            mapping.iterative_mapping(
                bowtie_path=b_path + '/bowtie2',
                bowtie_index_path=os.getcwd() + '/index/ref_index',
                fastq_path=fa_1_path,
                out_sam_path='reads01_R1.bam',
                min_seq_len=25,
                len_step=5,
                nthreads=16,
                temp_dir='tmp',
                bowtie_flags='--very-fast')

            log += ">> First file iterated" + "\n"
            self.textEdit.setText(log)
            self.progressBar.setValue(25)

            mapping.iterative_mapping(
                bowtie_path=b_path + '/bowtie2',
                bowtie_index_path=os.getcwd() + '/index/ref_index',
                fastq_path=fa_2_path,
                out_sam_path='reads01_R2.bam',
                min_seq_len=25,
                len_step=5,
                nthreads=16,
                temp_dir='tmp',
                bowtie_flags='--very-fast')

            log += ">> Second file iterated" + "\n"
            self.textEdit.setText(log)
            self.progressBar.setValue(50)

            mapped_reads = h5dict.h5dict('mapped_reads.hdf5')
            genome_db = genome.Genome(g_path, readChrms=[chromosome])

            mapping.parse_sam(
                sam_basename1='reads01_R1.bam',
                sam_basename2='reads01_R2.bam',
                out_dict=mapped_reads,
                genome_db=genome_db,
                enzyme_name=enzyme)

            fragments = fragmentHiC.HiCdataset(
                filename='fragment_dataset.hdf5',
                genome=genome_db,
                maximumMoleculeLength=500,
                mode='w',
                enzymeName=enzyme)

            fragments.parseInputData(
                dictLike='mapped_reads.hdf5')

            fragments.printStats()

            fragments.filterRsiteStart(offset=5)
            fragments.filterDuplicates()
            fragments.filterLarge()
            fragments.filterExtreme(cutH=0.005, cutL=0)

            fragments.printStats()
            fragments.writeFilteringStats()

            fragments.saveHeatmap(filename='heatmap.hdf5', resolution=int(rsl))

            log += ">> Heatmap.hdf5 created successfully!" + "\n"
            self.textEdit.setText(log)
            self.progressBar.setValue(80)

            file = "%s.hdf5" % 'heatmap'

            raw_heatmap = h5dict.h5dict(file, mode='r')
            resolution = int(raw_heatmap['resolution'])

            binD = binnedData.binnedData(resolution, genome_db)
            binD.simpleLoad(file, 'HindIII')

            binD.removeDiagonal()

            binD.removeBySequencedCount(0.5)

            binD.removePoorRegions(cutoff=1)

            binD.iterativeCorrectWithoutSS(M=20)

            file = "IC-%s.hdf5" % 'heatmap'

            binD.export(enzyme, file, byChromosome='all')

            # fig = plt.figure()
            # plt.imshow(np.log2(binD.dataDict['HindIII']), interpolation='none', origin='lower')
            # plt.colorbar().set_label('log2(# reads)')
            # plt.xticks((binD.chromosomeStarts + binD.chromosomeEnds) / 2, genome_db.chrmLabels)
            # plt.yticks((binD.chromosomeStarts + binD.chromosomeEnds) / 2, genome_db.chrmLabels)

            fig = plt.figure()
            ax = fig.add_subplot(111)
            cax = ax.imshow(np.log2(binD.dataDict[enzyme]), interpolation='none', origin='lower')
            fig.colorbar(cax, ax=ax, label='log2(# reads)')  # Привязываем colorbar к 'cax'
            ax.set_xticks((np.array(binD.chromosomeStarts) + np.array(binD.chromosomeEnds)) / 2)
            ax.set_xticklabels(genome_db.chrmLabels, rotation=90)
            ax.set_yticks((np.array(binD.chromosomeStarts) + np.array(binD.chromosomeEnds)) / 2)
            ax.set_yticklabels(genome_db.chrmLabels)

            self.display_heatmap(fig)

            file = "IC-%s.pdf" % 'heatmap'
            fig.savefig(file)

            log += ">> Done!" + "\n"
            self.textEdit.setText(log)
            self.progressBar.setValue(100)

            now = datetime.now()
            dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

            log += ">> Done! The time is " + dt_string + "\n"
            self.textEdit.setText(log)

        except Exception as error:
            log += "<!> Exception : " + str(error) + "\n"
            self.textEdit.setText(log)
            self.progressBar.setValue(0)


if __name__ == "__main__":
    import sys

    logging.basicConfig(level=logging.DEBUG)
    if not os.path.exists('tmp/'):
        os.mkdir('tmp/')

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
